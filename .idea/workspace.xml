<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="f5c272dc-f890-4f38-9e78-366c9498b59c" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/cluster_tools.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/cluster_tools.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/cluster_tools.clj" beforeDir="false" afterPath="$PROJECT_DIR$/target/cluster_tools.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="availableProjects">
      <map>
        <entry>
          <key>
            <ExternalProjectPojo>
              <option name="name" value="hpl-util" />
              <option name="path" value="$PROJECT_DIR$" />
            </ExternalProjectPojo>
          </key>
          <value>
            <list>
              <ExternalProjectPojo>
                <option name="name" value="hpl-util" />
                <option name="path" value="$PROJECT_DIR$" />
              </ExternalProjectPojo>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="modificationStamps">
      <map>
        <entry key="$USER_HOME$/.clojure/deps.edn" value="0" />
        <entry key="$PROJECT_DIR$" value="4670933584000" />
        <entry key="$PROJECT_DIR$/deps.edn" value="819396828" />
        <entry key="/usr/local/lib/clojure/deps.edn" value="3158775704" />
      </map>
    </option>
    <option name="projectSyncType">
      <map>
        <entry key="$PROJECT_DIR$" value="RE_IMPORT" />
      </map>
    </option>
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="CLOJURE_DEPS">
      <state>
        <task path="C:\Users\pielkelh\Drive\projects\hpl-util">
          <activation />
        </task>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="hpl-util" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/cluster_tools.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="654">
              <caret line="30" column="18" selection-start-line="30" selection-start-column="18" selection-end-line="30" selection-end-column="18" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="110">
              <caret line="5" selection-start-line="5" selection-end-line="5" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/deps.edn">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="88">
              <caret line="4" column="9" selection-start-line="4" selection-start-column="9" selection-end-line="4" selection-end-column="9" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/math.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1562">
              <caret line="71" column="32" selection-start-line="71" selection-start-column="32" selection-end-line="71" selection-end-column="32" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/script.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="198">
              <caret line="9" column="26" selection-start-line="9" selection-start-column="26" selection-end-line="9" selection-end-column="26" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/util.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="440">
              <caret line="20" column="13" selection-start-line="20" selection-start-column="13" selection-end-line="20" selection-end-column="13" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/graph.clj" />
        <option value="$PROJECT_DIR$/src/cluster.clj" />
        <option value="$PROJECT_DIR$/build.boot" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/core.clj" />
        <option value="$PROJECT_DIR$/src/math.clj" />
        <option value="$PROJECT_DIR$/deps.edn" />
        <option value="$PROJECT_DIR$/src/script.clj" />
        <option value="$PROJECT_DIR$/src/util.clj" />
        <option value="$PROJECT_DIR$/src/cluster_tools.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1920" />
    <option name="y" value="30" />
    <option name="width" value="1680" />
    <option name="height" value="1050" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="hpl-util" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
            <path>
              <item name="hpl-util" type="b2602c69:ProjectViewProjectNode" />
              <item name="hpl-util" type="72ca9032:PsiDirectoryNodeCustom" />
              <item name="src" type="72ca9032:PsiDirectoryNodeCustom" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="add_unversioned_files" value="true" />
    <property name="cursive.last.file.extension./home/tuh8888/Documents/hpl-util/src" value="clj" />
    <property name="cursive.last.file.extension.C\:/Users/pielkelh/Drive/projects/hpl-util/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../Word2Vec-clj" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="configurable.group.build" />
  </component>
  <component name="ReplState" timestamp="1559691517377">{:repl-history {:ide [], :local [{:command &quot;(+ 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(* ^Long 2 ^Long 5)&quot;, :offset 19, :ns &quot;math&quot;} {:command &quot;(* (long 2) (long 5))&quot;, :offset 21, :ns &quot;math&quot;} {:command &quot;(type (* (long 2) (long 5)))&quot;, :offset 28, :ns &quot;math&quot;} {:command &quot;(comment\n  (t/set-level! :warn)\n  (find-longest-digit-multiplication-expansion 5)\n  (type (* (long 2) (long 5))))&quot;, :offset 113, :ns &quot;math&quot;} {:command &quot;(type (* 1 (long 2)))&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(find-longest-digit-multiplication-expansion 8)&quot;, :offset 47, :ns &quot;math&quot;} {:command &quot;(defn find-longest-digit-multiplication-expansion\n  \&quot;Finds the shortest whole number whose digits, can be iteratively multiplied\n  the most times. Current record holder is 277777788888899 with 11 iterations.\&quot;\n  [num-combos-to-try]\n  (let [longest (atom [(list) 0])]\n    (print (or (map (fn [use2?]\n                (map (fn [use3?]\n                       (map (fn [use4?]\n                              (map (fn [num5]\n                                     (map (fn [num6]\n                                            (map (fn [num7]\n                                                   (map (fn [num8]\n                                                          (map (fn [num9]\n                                                                 (evaluate-num longest\n                                                                               (make-num use2? use3? use4? num5 num6 num7 num8 num9))\n                                                                 nil)\n                                                               (range num-combos-to-try)))\n                                                        (range num-combos-to-try)))\n                                                 (range num-combos-to-try)))\n                                          (range num-combos-to-try)))\n                                   (range num-combos-to-try)))\n                            [true false]))\n                     [true false]))\n              [true false])))\n    @longest))&quot;, :offset 1470, :ns &quot;math&quot;} {:command &quot;(find-longest-digit-multiplication-expansion 4)&quot;, :offset 47, :ns &quot;math&quot;} {:command &quot;(find-longest-digit-multiplication-expansion 5)&quot;, :offset 47, :ns &quot;math&quot;} {:command &quot;(find-longest-digit-multiplication-expansion 6)&quot;, :offset 47, :ns &quot;math&quot;} {:command &quot;(find-longest-digit-multiplication-expansion 7)&quot;, :offset 47, :ns &quot;math&quot;} {:command &quot;(repeat true 1)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(repeat 0 1)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(find-highest-mult-persistence 22)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(defn find-highest-mult-persistence\n  \&quot;Finds the shortest whole number whose digits, can be iteratively multiplied\n  the most times. Current record holder is 277777788888899 with 11 iterations.\&quot;\n  [num-digits]\n  (let [best (atom {:num     (list)\n                    :steps   0\n                    :longest 0})\n        num-digits (int (inc (/ (+ 3 num-digits) 5)))\n        digit-params (combo/cartesian-product\n                       [true false]\n                       [true false]\n                       [true false]\n                       (range num-digits)\n                       (range num-digits)\n                       (range num-digits)\n                       (range num-digits)\n                       (range num-digits))]\n    (letfn [(check-num [x]\n              (let [steps (mult-persistence x)]\n                (swap! best #(cond-&gt; %\n                                     (&lt; (:steps %) steps) (assoc :num x :steps steps)\n                                     (and (= (:steps %) steps)\n                                          (&lt; (count x) (count (:num %)))) (assoc :num x :steps steps)\n                                     (&lt; (:longest %) (count x)) (assoc :longest (count x))))))\n            (make-num [use2? use3? use4? num5 num6 num7 num8 num9]\n              (lazy-cat\n                (repeat (if use2? 0 1) 2)\n                (repeat (if (and use3? (not use2?)) 0 1) 3)\n                (repeat (if (and use4? (not use2?)) 0 1) 4)\n                (repeat (if (not use2?) 0 num5) 5)\n                (repeat num6 6)\n                (repeat num7 7)\n                (repeat num8 8)\n                (repeat num9 9)))]\n      (doall\n        (pmap #(check-num (apply make-num %)) digit-params))\n      @best)))&quot;, :offset 1713, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 16)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 50)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 75)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(t/set-level! :warn)&quot;, :offset 20, :ns &quot;math&quot;} {:command &quot;(t/set-level! :info)&quot;, :offset 20, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 45)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(def mult-persistence\n  (let [mem (atom {})]\n    (fn [&amp; args]\n      (if-let [e (find @mem (first args))]\n        (val e)\n        (let [ret (apply _mult-persistence args)]\n          (swap! mem assoc (first args) ret)\n          ret)))))&quot;, :offset 234, :ns &quot;math&quot;} {:command &quot;(def mult-persistence\n  (let [mem (atom {})]\n    (fn\n      ([x step]\n         (if-let [e (find @mem x)]\n           (val e)\n           (let [ret (_mult-persistence x step)]\n             (swap! mem assoc x ret)\n             ret)))\n      ([x]\n        (_mult-persistence x 0)))))&quot;, :offset 275, :ns &quot;math&quot;} {:command &quot;(def mult-persistence\n  (let [mem (atom {})]\n    (fn\n      ([x step]\n         (if-let [e (find @mem x)]\n           (val e)\n           (let [ret (_mult-persistence x step)]\n             (swap! mem assoc x ret)\n             ret)))\n      ([x]\n       (swap! mem assoc x (_mult-persistence x 0))))))&quot;, :offset 294, :ns &quot;math&quot;} {:command &quot;(def mult-persistence\n  (let [mem (atom {})]\n    (fn\n      ([x step]\n         (if-let [e (find @mem x)]\n           (val e)\n           (let [ret (_mult-persistence x step)]\n             (swap! mem assoc x ret)\n             ret)))\n      ([x]\n       (let [ret (_mult-persistence x 0)]\n         (swap! mem assoc x ret)\n         ret)))))&quot;, :offset 332, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 25)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 30)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 40)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 20)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 4)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 10)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 15)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 0)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 2)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 1)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 5)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 6)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 7)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 8)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(mult-persistence 277777788888899)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 9)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 12)&quot;, :offset 34, :ns &quot;math&quot;} {:command &quot;(find-highest-mult-persistence 3)&quot;, :offset 33, :ns &quot;math&quot;} {:command &quot;()&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(ns script\n  (require [clojre.spec :as spec]\n           [clojure.spec.test :as test]))&quot;, :offset 86, :ns &quot;user&quot;} {:command &quot;(ns script\n  (require '[clojre.spec :as spec]\n           '[clojure.spec.test :as test]))&quot;, :offset 88, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [clojre.spec :as spec]\n           [clojure.spec.test :as test]))&quot;, :offset 87, :ns &quot;user&quot;} {:command &quot;(require [clojure.spec :as spec])&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [taoensso.timbre :as t] \n    [clojre.spec :as spec]\n            [clojure.spec.test :as test]))&quot;, :offset 117, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [taoensso.timbre :as t]\n            [clojre.spec.alpha :as spec\n             ]\n            [clojure.spec.test :as test]))&quot;, :offset 144, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [clojre.spec.alpha :as spec]\n            [clojure.spec.test :as test]))&quot;, :offset 94, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [clojre.spec :as spec]\n            [clojure.spec.test :as test]))&quot;, :offset 88, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [clojure.spec.alpha :as spec]\n            [clojure.spec.test :as test]))&quot;, :offset 95, :ns &quot;user&quot;} {:command &quot;(ns script\n  (:require [clojure.spec :as spec]\n            [clojure.spec.test :as test]))&quot;, :offset 89, :ns &quot;user&quot;} {:command &quot;(my-index-of \&quot;foobar\&quot; \&quot;b\&quot;)&quot;, :offset 26, :ns &quot;script&quot;} {:command &quot;(apply my-index-of [\&quot;foobar\&quot; \&quot;b\&quot;])&quot;, :offset 34, :ns &quot;script&quot;} {:command &quot;(spec/def ::index-of-args \n  (spec/cat :source string? :search string?))&quot;, :offset 72, :ns &quot;script&quot;} {:command &quot;(test/check ::index-of-args [\&quot;foobar\&quot; \&quot;b\&quot;])&quot;, :offset 43, :ns &quot;script&quot;} {:command &quot;(spec/valid? ::index-of-args [\&quot;foobar\&quot; \&quot;b\&quot;])&quot;, :offset 44, :ns &quot;script&quot;} {:command &quot;(spec/valid? ::index-of-args [\&quot;foobar\&quot; 2])&quot;, :offset 42, :ns &quot;script&quot;} {:command &quot;(spec/conform ::index-of-args [\&quot;foo\&quot; \&quot;f\&quot;])&quot;, :offset 42, :ns &quot;script&quot;} {:command &quot;(spec/unform ::index-of-args {:sorce \&quot;foo\&quot; :search \&quot;f\&quot;})&quot;, :offset 56, :ns &quot;script&quot;} {:command &quot;(spec/unform ::index-of-args {:source \&quot;foo\&quot; :search \&quot;f\&quot;})&quot;, :offset 57, :ns &quot;script&quot;} {:command &quot;(spec/explain ::index-of-args [\&quot;foo\&quot; 3])&quot;, :offset 40, :ns &quot;script&quot;} {:command &quot;(spec/explain-str ::index-of-args [\&quot;foo\&quot; 3])&quot;, :offset 44, :ns &quot;script&quot;} {:command &quot;(spec/explain-str (spec/every ::index-of-args) [[\&quot;good\&quot; \&quot;a\&quot;]\n                                                [\&quot;ok\&quot; \&quot;b\&quot;]\n                                                [\&quot;bad\&quot; 42]])&quot;, :offset 180, :ns &quot;script&quot;} {:command &quot;(spec/explain (spec/every ::index-of-args) [[\&quot;good\&quot; \&quot;a\&quot;]\n                                                [\&quot;ok\&quot; \&quot;b\&quot;]\n                                                [\&quot;bad\&quot; 42]])&quot;, :offset 176, :ns &quot;script&quot;} {:command &quot;(spec/exercise ::index-of-args)&quot;, :offset 31, :ns &quot;script&quot;} {:command &quot;(def sentence \&quot;Two homologues of the rhombotin gene have now been isolated\&quot;)&quot;, :offset 76, :ns &quot;script&quot;} {:command &quot;(ns script\n  (:require [clojure.spec.alpha :as spec]\n            [clojure.spec.test.alpha :as test]\n            [clojure.string :as str]\n            [ubergraph.core :as uber]))&quot;, :offset 176, :ns &quot;user&quot;} {:command &quot;(split-at \&quot; \&quot; sentence)&quot;, :offset 23, :ns &quot;script&quot;} {:command &quot;(str/split sentence \&quot; \&quot;)&quot;, :offset 24, :ns &quot;script&quot;} {:command &quot;(str/split sentence #\&quot; \&quot;)&quot;, :offset 25, :ns &quot;script&quot;} {:command &quot;(map keyword (str/split sentence #\&quot; \&quot;))&quot;, :offset 39, :ns &quot;script&quot;} {:command &quot;(def g (let [x (mapv keyword (str/split sentence #\&quot; \&quot;))]\n         (uber/digraph [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)]\n                       [(get x 0) (get x 1)])))&quot;, :offset 419, :ns &quot;script&quot;} {:command &quot;(def sentence \&quot;Little is known about genetic factors affecting intraocular pressure ( IOP ) in mice and other mammals .\&quot;)&quot;, :offset 121, :ns &quot;script&quot;} {:command &quot;(def sentence \&quot;Little is known about genetic factors affecting intraocular pressure -LRB- IOP -RRB- in mice and other mammals .\&quot;)&quot;, :offset 129, :ns &quot;script&quot;} {:command &quot;(mapv keyword (str/split sentence #\&quot; \&quot;))&quot;, :offset 40, :ns &quot;script&quot;} {:command &quot;(count (mapv keyword (str/split sentence #\&quot; \&quot;)))&quot;, :offset 48, :ns &quot;script&quot;} {:command &quot;(def g (let [x (mapv keyword (str/split sentence #\&quot; \&quot;))]\n         (uber/digraph [(get x 0) (get x 2)]\n                       [(get x 1) (get x 2)]\n                       [(get x 2) :ROOT]\n                       [(get x 3) (get x 2)]\n                       [(get x 4) (get x 5)]\n                       [(get x 5) (get x 3)]\n                       [(get x 6) (get x 5)]\n                       [(get x 7) (get x 8)]\n                       [(get x 8) (get x 6)]\n                       [(get x 9) (get x 10)]\n                       [(get x 10) (get x 8)]\n                       [(get x 11) (get x 8)]\n                       [(get x 12) (get x 8)]\n                       [(get x 13) (get x 12)]\n                       [(get x 14) (get x 13)]\n                       [(get x 15) (get x 16)]\n                       [(get x 16) (get x 13)]\n                       [(get x 17) (get x 2)])))&quot;, :offset 878, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:layout :neato})&quot;, :offset 35, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:layout :dot})&quot;, :offset 33, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:layout :fdp})&quot;, :offset 33, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:layout :sfdp})&quot;, :offset 34, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:layout :twopi})&quot;, :offset 35, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:layout :circo})&quot;, :offset 35, :ns &quot;script&quot;} {:command &quot;(def g (let [x (mapv keyword (str/split sentence #\&quot; \&quot;))]\n         (uber/digraph [(get x 2) (get x 0)]\n                       [(get x 2) (get x 1)]\n                       [:ROOT (get x 2)]\n                       [(get x 2) (get x 3)]\n                       [(get x 5) (get x 4)]\n                       [(get x 3) (get x 5)]\n                       [(get x 5) (get x 6)]\n                       [(get x 8) (get x 7)]\n                       [(get x 6) (get x 8)]\n                       [(get x 10) (get x 9)]\n                       [(get x 8) (get x 10)]\n                       [(get x 8) (get x 11)]\n                       [(get x 8) (get x 12)]\n                       [(get x 12) (get x 13)]\n                       [(get x 13) (get x 14)]\n                       [(get x 16) (get x 15)]\n                       [(get x 13) (get x 16)]\n                       [(get x 2) (get x 17)])))&quot;, :offset 878, :ns &quot;script&quot;} {:command &quot;(def g (let [x (mapv keyword (str/split sentence #\&quot; \&quot;))]\n         (uber/digraph [(get x 2) (get x 0) :nsubjpass]\n                       [(get x 2) (get x 1) :auxpass]\n                       [:ROOT (get x 2) :root]\n                       [(get x 2) (get x 3) :prep]\n                       [(get x 5) (get x 4) :amod]\n                       [(get x 3) (get x 5) :pobj]\n                       [(get x 5) (get x 6) :acl]\n                       [(get x 8) (get x 7) :amod]\n                       [(get x 6) (get x 8) :dobj]\n                       [(get x 10) (get x 9) :punct]\n                       [(get x 8) (get x 10) :appos]\n                       [(get x 8) (get x 11) :punct]\n                       [(get x 8) (get x 12) :prep]\n                       [(get x 12) (get x 13) :pobj]\n                       [(get x 13) (get x 14) :cc]\n                       [(get x 16) (get x 15) :amod]\n                       [(get x 13) (get x 16) :conj]\n                       [(get x 2) (get x 17) :punct])))&quot;, :offset 995, :ns &quot;script&quot;} {:command &quot;(def g (let [x (mapv keyword (str/split sentence #\&quot; \&quot;))]\n         (uber/digraph [(get x 2) (get x 0) {:label :nsubjpass}]\n                       [(get x 2) (get x 1) {:label :auxpass}]\n                       [:ROOT (get x 2) {:label :root}]\n                       [(get x 2) (get x 3) {:label :prep}]\n                       [(get x 5) (get x 4) {:label :amod}]\n                       [(get x 3) (get x 5) {:label :pobj}]\n                       [(get x 5) (get x 6) {:label :acl}]\n                       [(get x 8) (get x 7) {:label :amod}]\n                       [(get x 6) (get x 8) {:label :dobj}]\n                       [(get x 10) (get x 9) {:label :punct}]\n                       [(get x 8) (get x 10) {:label :appos}]\n                       [(get x 8) (get x 11) {:label :punct}]\n                       [(get x 8) (get x 12) {:label :prep}]\n                       [(get x 12) (get x 13) {:label :pobj}]\n                       [(get x 13) (get x 14) {:label :cc}]\n                       [(get x 16) (get x 15) {:label :amod}]\n                       [(get x 13) (get x 16) {:label :conj}]\n                       [(get x 2) (get x 17) {:label :punct}])))&quot;, :offset 1157, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g)&quot;, :offset 18, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;~/Pictures/dep_example.png\&quot; :format :png}})&quot;, :offset 80, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;dep_example.png\&quot; :format :png}})&quot;, :offset 69, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph g {:save {:filename \&quot;/home/harrison/Pictures/dep_example.png\&quot; :format :png}})&quot;, :offset 93, :ns &quot;script&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;user&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]))&quot;, :offset 273, :ns &quot;script&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :clustering]\n                             [:clustering :patterns]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds]))&quot;, :offset 689, :ns &quot;script&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :matches {:label :filtering}]\n                             [:filtering :matches]\n                             [:matches :seeds]))&quot;, :offset 673, :ns &quot;script&quot;} {:command &quot;(def algorithm (uber/digraph [:text-sources :dependency-annotations]\n                             [:text-sources :concept-annotations]\n                             [:concept-annotations :context-paths]\n                             [:dependency-annotations :context-paths]\n                             [:context-paths :seeds]\n                             [:context-paths :sentences]\n                             [:seeds :patterns {:label :clustering}]\n                             [:patterns :filtering]\n                             [:sentences :filtering]\n                             [:filtering :matches]\n                             [:matches :seeds]))&quot;, :offset 655, :ns &quot;script&quot;} {:command &quot;(uber/viz-graph algorithm)&quot;, :offset 26, :ns &quot;script&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL">
    <configuration name="REBL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="hpl-util" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="rebl" />
      <method v="2" />
    </configuration>
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="hpl-util" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.REBL" />
      <item itemvalue="Clojure REPL.REPL" />
    </list>
  </component>
  <component name="ToolWindowManager">
    <frame x="1599" y="29" width="1682" height="1022" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info auto_hide="true" content_ui="combo" id="Project" order="0" weight="0.22161172" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" side_tool="true" />
      <window_info anchor="bottom" id="FindBugs-IDEA" order="0" />
      <window_info anchor="bottom" id="Build" order="1" sideWeight="0.4978242" weight="0.285558" />
      <window_info anchor="bottom" id="Terminal" order="2" />
      <window_info anchor="bottom" id="Docker" order="3" show_stripe_button="false" />
      <window_info anchor="bottom" id="CheckStyle" order="4" />
      <window_info anchor="bottom" id="Event Log" order="5" side_tool="true" weight="0.32876712" />
      <window_info anchor="bottom" id="Run with VisualVM" order="6" />
      <window_info anchor="bottom" id="Database Changes" order="7" />
      <window_info anchor="bottom" id="Version Control" order="8" />
      <window_info anchor="bottom" id="Debug with VisualVM" order="9" />
      <window_info anchor="bottom" id="Message" order="10" />
      <window_info anchor="bottom" id="Find" order="11" />
      <window_info anchor="bottom" id="Run" order="12" weight="0.32876712" />
      <window_info anchor="bottom" id="Debug" order="13" sideWeight="0.69720346" weight="0.29246488" />
      <window_info anchor="bottom" id="Cvs" order="14" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="15" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="16" />
      <window_info anchor="bottom" x="0" y="0" width="354" height="716" id="Documentation" order="17" sideWeight="0.30279654" side_tool="true" visible="true" weight="0.2909292" />
      <window_info anchor="bottom" id="Messages" order="18" weight="0.32932165" />
      <window_info anchor="right" id="Maven" order="0" />
      <window_info anchor="right" id="Palette" order="1" />
      <window_info anchor="right" id="Google Cloud Storage" order="2" show_stripe_button="false" />
      <window_info anchor="right" id="SciView" order="3" />
      <window_info anchor="right" id="Database" order="4" />
      <window_info anchor="right" id="Leiningen" order="5" sideWeight="0.4989059" weight="0.3466495" />
      <window_info anchor="right" id="Palette&#9;" order="6" />
      <window_info anchor="right" auto_hide="true" id="Clojure Deps" order="7" sideWeight="0.48687088" weight="0.2824755" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="8" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="9" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="10" weight="0.25" />
      <window_info anchor="right" x="3532" y="662" width="827" height="562" id="REPL" order="11" sideWeight="0.5010941" side_tool="true" type="FLOATING" visible="true" weight="0.32905984" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Added map-kv" />
    <MESSAGE value="Added vector operations" />
    <MESSAGE value="Added graph" />
    <MESSAGE value="Added evaluation statistics functions" />
    <MESSAGE value="Added cluster tools" />
    <MESSAGE value="Added boot script" />
    <MESSAGE value="Init Abra-C" />
    <MESSAGE value="fixed f1 calculation" />
    <MESSAGE value="Some string fns and parallelization fns" />
    <MESSAGE value="Added pmap version of mapkv" />
    <option name="LAST_COMMIT_MESSAGE" value="Added pmap version of mapkv" />
  </component>
  <component name="debuggerHistoryManager">
    <expressions id="breakpointCondition">
      <expression>
        <expression-string>(= x 277777788888899)</expression-string>
        <language-id>Clojure</language-id>
        <evaluation-mode>EXPRESSION</evaluation-mode>
      </expression>
    </expressions>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar!/clojure/spec/alpha.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="97">
          <caret line="636" column="10" selection-start-line="636" selection-start-column="10" selection-end-line="636" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cluster.clj" />
    <entry file="file://$PROJECT_DIR$/src/graph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="37" selection-start-line="7" selection-start-column="37" selection-end-line="7" selection-end-column="37" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/target/AUTHORS">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/target/Util.java">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/target/walk.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/build.boot">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="154">
          <caret line="7" column="46" selection-start-line="7" selection-start-column="46" selection-end-line="7" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="22">
          <caret line="1" selection-start-line="1" selection-end-line="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="5" selection-start-line="5" selection-end-line="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/deps.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="88">
          <caret line="4" column="9" selection-start-line="4" selection-start-column="9" selection-end-line="4" selection-end-column="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/math.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1562">
          <caret line="71" column="32" selection-start-line="71" selection-start-column="32" selection-end-line="71" selection-end-column="32" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/script.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="9" column="26" selection-start-line="9" selection-start-column="26" selection-end-line="9" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/util.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="440">
          <caret line="20" column="13" selection-start-line="20" selection-start-column="13" selection-end-line="20" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cluster_tools.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="654">
          <caret line="30" column="18" selection-start-line="30" selection-start-column="18" selection-end-line="30" selection-end-column="18" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>d3.v4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>hpl-util</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Deps: org.clojure/clojure:1.9.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>